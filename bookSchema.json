{
  "title": "Python Sponge book",
  "description": "schema for Python Sponge books. Defined the challenges and associated tests",
  "type": "object",
  "oneOf": [
    {
      "type": "object",
      "properties": {
        "$schema": {},
        "id": {
          "$ref": "#/$defs/id"
        },
        "name": {
          "$ref": "#/$defs/name"
        },
        "comment": {
          "$ref": "#/$defs/comment"
        },
        "children": {
          "$ref": "#/$defs/children"
        },
        "bookMainUrl": {
          "$ref": "#/$defs/bookMainUrl"
        }
      },
      "required": ["name", "id", "children"],
      "additionalProperties": false
    },
    {
      "type": "object",
      "properties": {
        "$schema": {},
        "id": {
          "$ref": "#/$defs/id"
        },
        "name": {
          "$ref": "#/$defs/name"
        },
        "guide": {
          "$ref": "#/$defs/guide"
        },
        "py": {
          "$ref": "#/$defs/py"
        },
        "typ": {
          "$ref": "#/$defs/typ"
        },
        "isExample": {
          "$ref": "#/$defs/isExample"
        },
        "tests": {
          "$ref": "#/$defs/tests"
        },
        "additionalFiles": {
          "$ref": "#/$defs/additionalFiles"
        },        
        "comment": {
          "$ref": "#/$defs/comment"
        },
        "bookMainUrl": {
          "$ref": "#/$defs/bookMainUrl"
        }
      },
      "required": ["name", "id"],
      "additionalProperties": false
    }
  ],
  "$defs": {
    "id": {
      "description": "unique ID",
      "type": "string",
      "format": "uuid"
    },
    "name": {
      "description": "section or challenge name",
      "type": "string"
    },
    "guide": {
      "description": "relative path to guide markdown file",
      "type": "string",
      "pattern": "^(.*\\.md)$"
    },
    "py": {
      "description": "relative path to code file",
      "type": "string",
      "pattern": "^(.*\\.py)$"
    },
    "typ": {
      "description": "Challenge type",
      "type": "string",
      "enum": ["canvas", "parsons", "py"]
    },
    "isExample": {
      "description": "is this just an example code? Students need to debug example challenges, but no changes are required",
      "type": "boolean"
    },
    "tests": {
      "description": "optional list of tests",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "in": {
            "oneOf": [
              {
                "description": "stdin. Use \n for line breaks",
                "type": "string"
              },
              {
                "description": "stdin. List items will be entered as separate lines",
                "type": "array",
                "items": {
                  "type": ["string", "number"]
                }
              }
            ]
          },
          "out": {
            "oneOf": [
              {
                "description": "stdout to compare to. Use .* to match a line (but not the new line). Use \n for line breaks.",
                "type": "string"
              },
              { "$ref": "#/$defs/advancedOutRequirement" }
            ]
          },
          "comment": {
            "$ref": "#/$defs/comment"
          }
        },
        "additionalProperties": false
      }
    },
    "additionalFiles": {
      "description": "optional list of files",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "filename": {
            "description": "name of file inc. extension to be found within the challenge folder or zip",
            "type": "string"
          },
          "visible": {
            "description": "whether file contents can be viewed as separate tab when challenge is open (default false)",
            "type": "boolean"
          },
          "comment": {
            "$ref": "#/$defs/comment"
          }
        },
        "required": ["filename"],
        "additionalProperties": false
      }
    },
    "children": {
      "description": "array of children nodes, which allows a recursive structure",
      "type": "array",
      "items": {
        "$ref": "#"
      }
    },
    "comment": {
      "description": "optional comment; this is not shown to students",
      "type": "string"
    },
    "bookMainUrl": {
      "readOnly": true,
      "description": "cache; do not use",
      "hidden": true
    },
    "advancedOutRequirement": {
      "description": "output requirement with more control",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "description": "regex pattern to match"
          },
          "typ": {
            "type": "string",
            "description": "should the output match this requirement or not",
            "enum": ["+", "-", "c+", "c-", "f+", "f-", "s+", "s-", "t"],
            "default": "+"
          },
          "ignore": {
            "type": "string",
            "description": "ignore common failures including white spaces, capitalisation(casing), punctionation. Use some combination of wcp",
            "default": "",
            "enum": ["", "w", "c", "p", "wc", "wp", "cp", "wcp"]
          },
          "count": {
            "type": "number",
            "default": -1,
            "description": "The output must occur (-: not occur) exactly `count` number of times. -1, which is the default, means we don't care."
          },
          "filename" : {
            "type": "string",
            "description": "output file to check",
            "default": ""
          },
          "statement": {
            "type": "string",
            "description": "Python statement to check the output of",
            "default": ""
          }
        },
        "additionalProperties": false,
        "required": []
      }
    }
  }
}
